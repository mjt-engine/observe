(function(c,f){typeof exports=="object"&&typeof module<"u"?f(exports):typeof define=="function"&&define.amd?define(["exports"],f):(c=typeof globalThis<"u"?globalThis:c||self,f(c.Module={}))})(this,function(c){"use strict";const f=t=>t==null||Number.isNaN(t),b={isDefined:t=>!f(t),isUndefined:f},{isDefined:l,isUndefined:v}=b,O=(t,e,n)=>{if(v(t))return;const r=e.get(t);if(l(r))return r;if(l(n)){const s=n();return e.set(t,s),s}},$={create:()=>{const t=new Map;let e=performance.now();const n={get:(r,s)=>O(r,t,s),set:(r,s)=>(t.set(r,s),n),delete:r=>t.delete(r),entries:()=>Array.from(t.entries()),clear:()=>t.clear(),size:()=>t.size,findKeys:r=>Array.from(t.entries()).filter(([a,u])=>u===r).map(([a,u])=>a),lastUpdate:()=>e};return n}},y=t=>e=>{if(typeof t=="string")return new RegExp(t).test(e.traceId);const{traceId:n,message:r,extra:s=()=>!0,timestamp:a=()=>!0}=t;return!(n&&!new RegExp(n).test(e.traceId)||r&&!new RegExp(r).test(e.message)||e.timestamp&&!a(e.timestamp)||e.extra&&!s(e.extra))},L=t=>e=>{for(const n of t)if(y(n)(e))return n;return!1},A=t=>e=>typeof t=="string"?e:t.transform?t.transform(e):e,d=t=>{const e=[],n={length:0,push:r=>{e.length>=t&&e.shift(),e.push(r),n.length=e.length},get:()=>e,clear:()=>{e.length=0,n.length=0},last:()=>e[e.length-1]};return n},p=()=>{let t=performance.now(),e;const n={end:()=>(l(e)||(e=performance.now()),n),getDuration:()=>(e??performance.now())-t};return n},h=(t=100)=>{let e=0;const n=new Map,r=new Map,s=new Map,a=d(t),u={clear:()=>(e=0,n.clear(),r.clear(),s.clear(),a.clear(),u),lastTime:()=>a.last(),time:()=>{const o=u.lastTime();l(o)&&o.end();const i=p();return a.push(i),i},getTimes:()=>a.get(),timer:o=>{const i=s.get(o)??d(t);s.set(o,i);const g=p();return i.push(g),g},increment:(o,i=1)=>{const g=n.get(o)??0;n.set(o,g+i)},gauge:(o,i=1)=>{const g=r.get(o)??0;r.set(o,g+i)},getCounters:()=>new Map(n),getCounter:o=>n.get(o)??0,getGauge:o=>r.get(o)??0,getGauges:()=>new Map(r),count:(o=1)=>{e+=o},getCount:()=>e,getTimers:o=>(s.get(o)??d(t)).get()};return u},w=({logMatchers:t=[],logger:e=console.log,clock:n=performance,maxSampleSize:r=100}={})=>{const s=$.create(),a={getTraceIds:()=>s.entries().map(([u])=>u),start:(u,...o)=>{a.getStats(u).count(),a.getStats(u).time(),a.log({traceId:u,message:"start",extra:o})},getStats:u=>s.get(u,()=>h(r)),log:({traceId:u,message:o,timestamp:i=n.now(),extra:g=[]})=>{const T={traceId:u,message:o,timestamp:i,extra:g},S=L(t)(T);if(!S)return;const m=A(S)(T);e(`${m.timestamp} ${m.traceId}: ${m.message}`,...m.extra??[])},end:(u,...o)=>{a.getStats(u).lastTime()?.end(),a.log({traceId:u,message:"end",extra:o})}};return a},M=(t="",e=w())=>{e.start(t);const n={span:r=>M(`${t}.${r}`,e),increment:(r,s=1)=>(e.getStats(t).increment(r,s),n),sample:(r,s,a)=>{if(Math.random()<r){const u=a();n.gauge(s,u)}return n},when:(r,s,a)=>{if(r()){const u=a();n.gauge(s,u)}return n},gauge:(r,s)=>(e.getStats(t).gauge(r,s),n),timer:r=>e.getStats(t).timer(r),end:()=>(e.end(t),n),log:(r,...s)=>(e.log({traceId:t,message:r,extra:s}),n)};return n},C=t=>{const e=t.split("."),n=e.shift(),r=e.join(".");return{root:n,segments:e,subpath:r}};c.Observe=M,c.ObserveAgent=w,c.Stats=h,c.Timer=p,c.parseTraceId=C,Object.defineProperty(c,Symbol.toStringTag,{value:"Module"})});
