(function(c,a){typeof exports=="object"&&typeof module<"u"?a(exports):typeof define=="function"&&define.amd?define(["exports"],a):(c=typeof globalThis<"u"?globalThis:c||self,a(c.Module={}))})(this,function(c){"use strict";const a=t=>t==null||Number.isNaN(t),M={isDefined:t=>!a(t),isUndefined:a},{isDefined:d,isUndefined:L}=M,b=(t,e,n)=>{if(L(t))return;const r=e.get(t);if(d(r))return r;if(d(n)){const o=n();return e.set(t,o),o}},S={create:()=>{const t=new Map;let e=performance.now();const n={get:(r,o)=>b(r,t,o),set:(r,o)=>(t.set(r,o),n),delete:r=>t.delete(r),entries:()=>Array.from(t.entries()),clear:()=>t.clear(),size:()=>t.size,findKeys:r=>Array.from(t.entries()).filter(([i,s])=>s===r).map(([i,s])=>i),lastUpdate:()=>e};return n}},O=t=>e=>{if(typeof t=="string")return new RegExp(t).test(e.traceId);const{traceId:n,message:r,extra:o=()=>!0,timestamp:i=()=>!0}=t;return!(n&&!new RegExp(n).test(e.traceId)||r&&!new RegExp(r).test(e.message)||e.timestamp&&!i(e.timestamp)||e.extra&&!o(e.extra))},$=t=>e=>{for(const n of t)if(O(n)(e))return n;return!1},v=t=>e=>typeof t=="string"?e:t.transform?t.transform(e):e,g=t=>{const e=[],n={length:0,push:r=>{e.length>=t&&e.shift(),e.push(r),n.length=e.length},get:()=>e,clear:()=>{e.length=0,n.length=0},last:()=>e[e.length-1]};return n},l=()=>{let t=performance.now(),e;const n={end:()=>(d(e)||(e=performance.now()),n),getDuration:()=>(e??performance.now())-t};return n},y=(t=100)=>{let e=0;const n=new Map,r=new Map,o=g(t),i={lastTime:()=>o.last(),time:()=>{const s=i.lastTime();d(s)&&s.end();const u=l();return o.push(u),u},getTimes:()=>o.get(),timer:s=>{const u=r.get(s)??g(t);r.set(s,u);const f=l();return u.push(f),f},counter:(s,u=1)=>{const f=n.get(s)??0;n.set(s,f+u)},getCounters:()=>new Map(n),getCounter:s=>n.get(s)??0,count:(s=1)=>{e+=s},getCount:()=>e,clearCount:()=>(e=0,i),getTimers:s=>(r.get(s)??g(t)).get(),clearTimers:s=>((r.get(s)??g(t)).clear(),i)};return i},p=({logMatchers:t=[],logger:e=console.log,clock:n=performance}={})=>{const r=S.create(),o={getTraceIds:()=>r.entries().map(([i])=>i),start:(i,...s)=>{o.getStats(i).count(),o.getStats(i).time(),o.addLog({traceId:i,message:"start",extra:s})},getStats:i=>r.get(i,()=>y()),addLog:({traceId:i,message:s,timestamp:u=n.now(),extra:f=[]})=>{const T={traceId:i,message:s,timestamp:u,extra:f},w=$(t)(T);if(!w)return;const m=v(w)(T);e(`${m.timestamp} ${m.traceId}: ${m.message}`,...m.extra??[])},end:(i,...s)=>{o.getStats(i).lastTime()?.end(),o.addLog({traceId:i,message:"end",extra:s})}};return o},h=(t="",e=p())=>{e.start(t);const n={span:r=>h(`${t}.${r}`,e),counter:(r,o=1)=>(e.getStats(t).counter(r,o),n),timer:r=>e.getStats(t).timer(r),end:()=>(e.end(t),n),log:(r,...o)=>(e.addLog({traceId:t,message:r,extra:o}),n)};return n},C=t=>{const e=t.split("."),n=e.shift(),r=e.join(".");return{root:n,segments:e,subpath:r}};c.Observe=h,c.ObserveAgent=p,c.parseTraceId=C,Object.defineProperty(c,Symbol.toStringTag,{value:"Module"})});
