(function(i,a){typeof exports=="object"&&typeof module<"u"?a(exports):typeof define=="function"&&define.amd?define(["exports"],a):(i=typeof globalThis<"u"?globalThis:i||self,a(i.Module={}))})(this,function(i){"use strict";const a=t=>t==null||Number.isNaN(t),L={isDefined:t=>!a(t),isUndefined:a},{isDefined:d,isUndefined:b}=L,T=(t,e,n)=>{if(b(t))return;const r=e.get(t);if(d(r))return r;if(d(n)){const o=n();return e.set(t,o),o}},O={create:()=>{const t=new Map;let e=performance.now();const n={get:(r,o)=>T(r,t,o),set:(r,o)=>(t.set(r,o),n),delete:r=>t.delete(r),entries:()=>Array.from(t.entries()),clear:()=>t.clear(),size:()=>t.size,findKeys:r=>Array.from(t.entries()).filter(([u,s])=>s===r).map(([u,s])=>u),lastUpdate:()=>e};return n}},S=t=>e=>{if(typeof t=="string")return new RegExp(t).test(e.traceId);const{traceId:n,message:r,extra:o=()=>!0,timestamp:u=()=>!0}=t;return!(n&&!new RegExp(n).test(e.traceId)||r&&!new RegExp(r).test(e.message)||e.timestamp&&!u(e.timestamp)||e.extra&&!o(e.extra))},$=t=>e=>{for(const n of t)if(S(n)(e))return n;return!1},v=t=>e=>typeof t=="string"?e:t.transform?t.transform(e):e,g=t=>{const e=[],n={length:0,push:r=>{e.length>=t&&e.shift(),e.push(r),n.length=e.length},get:()=>e,clear:()=>{e.length=0,n.length=0},last:()=>e[e.length-1]};return n},l=()=>{let t=performance.now(),e;const n={end:()=>(d(e)||(e=performance.now()),n),getDuration:()=>(e??performance.now())-t};return n},y=(t=100)=>{let e=0;const n=new Map,r=new Map,o=g(t),u={time:()=>{const s=o.last();d(s)&&s.end();const c=l();return o.push(c),c},getTimes:()=>o.get(),timer:s=>{const c=r.get(s)??g(t);r.set(s,c);const f=l();return c.push(f),f},counter:(s,c=1)=>{const f=n.get(s)??0;n.set(s,f+c)},getCounters:()=>new Map(n),getCounter:s=>n.get(s)??0,count:(s=1)=>{e+=s},getCount:()=>e,clearCount:()=>(e=0,u),getTimers:s=>(r.get(s)??g(t)).get(),clearTimers:s=>((r.get(s)??g(t)).clear(),u)};return u},p=({logMatchers:t=[],logger:e=console.log,clock:n=performance}={})=>{const r=O.create(),o={getTraceIds:()=>r.entries().map(([u])=>u),start:(u,...s)=>{o.getStats(u).count(),o.getStats(u).time(),o.addLog({traceId:u,message:"start",extra:s})},getStats:u=>r.get(u,()=>y()),addLog:({traceId:u,message:s,timestamp:c=n.now(),extra:f=[]})=>{const w={traceId:u,message:s,timestamp:c,extra:f},M=$(t)(w);if(!M)return;const m=v(M)(w);e(`${m.timestamp} ${m.traceId}: ${m.message}`,...m.extra??[])},end:(u,...s)=>{o.addLog({traceId:u,message:"end",extra:s})}};return o},h=(t="",e=p())=>{e.start(t);const n={span:r=>h(`${t}.${r}`,e),counter:(r,o=1)=>(e.getStats(t).counter(r,o),n),timer:r=>e.getStats(t).timer(r),end:()=>(e.end(t),n),log:(r,...o)=>(e.addLog({traceId:t,message:r,extra:o}),n)};return n},C=t=>{const e=t.split("."),n=e.shift(),r=e.join(".");return{root:n,segments:e,subpath:r}};i.Observe=h,i.ObserveAgent=p,i.parseTraceId=C,Object.defineProperty(i,Symbol.toStringTag,{value:"Module"})});
